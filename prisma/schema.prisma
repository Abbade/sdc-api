// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //provider = "sqlite"
  //url      = "file:./dev.db"
}
model Roles {
  id             Int      @id @default(autoincrement())
  name        String
  active        Boolean @default(true)

  permissions Permissions[]

  @@map("roles")
}

model Permissions {
  id Int @id @default(autoincrement())
  code String @unique
  name        String
  roles Roles[]

  @@map("permissions")
}

model Users {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())

  id_organization Int?
  organization    Organizations? @relation(name: "user-organization", fields: [id_organization], references: [id])

  name     String
  email    String @unique
  password String

  clones          Clones[]
  profiles        Profiles[]
  fasesCultivo    FasesCultivo[]
  recipientes     Recipientes[]
  genetics        Genetics[]
  sections        Sections[]
  locations       Locations[]
  propagationType PropagationType[]
  trashReasons    TrashReasons[]
  lotes           Lotes[]
  trashedLotes    TrashedLotes[]
  plantas         Plantas[]
  organizations   Organizations?    @relation(name: "userCreate")

  @@map("users")
}

model Organizations {
  id Int @id @default(autoincrement())

  userCreate     Users @relation(name: "userCreate", fields: [id_user_create], references: [id])
  id_user_create Int   @unique

  created_at DateTime @default(now())

  name        String @unique
  nick        String
  description String

  users Users[] @relation(name: "user-organization")

  @@map("organizations")
}

// PARAMS
model Profiles {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  id_user_create Int
  userCreate     Users @relation(fields: [id_user_create], references: [id])

  name        String
  description String

  genetics Genetics[]

  @@map("profiles")
}

model FasesCultivo {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String
  description String
  ordem       Int @unique

  plantas Plantas[]
  locations Locations[]

  @@map("fasesCultivo")
}

model Recipientes {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String
  description String

  plantas Plantas[]

  @@map("recipientes")
}

model Genetics {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String
  nick        String
  description String

  id_profile Int
  profile    Profiles @relation(fields: [id_profile], references: [id])

  plantas Plantas[]
  lotes   Lotes[]

  @@map("genetics")
}

model Sections {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String
  description String

  locations Locations[]

  @@map("section")
}

model Locations {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String
  description String

  id_section Int
  section    Sections @relation(fields: [id_section], references: [id])

  id_faseCultivo Int?
  faseCultivo FasesCultivo? @relation(fields: [id_faseCultivo], references: [id])

  plantas Plantas[]
  lotes   Lotes[]

  @@map("location")
}

model PropagationType {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String @unique
  description String

  plantas Plantas[]
  lotes   Lotes[]

  @@map("propagationType")
}

model TrashReasons {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String @unique
  description String

  trashedLotes TrashedLotes[]
  plantas      Plantas[]

  @@map("trashReason")
}

model Lotes {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())

  name String @unique

  obs String

  propDate DateTime

  id_propagationType Int
  propagationType    PropagationType @relation(fields: [id_propagationType], references: [id])

  id_genetic Int
  genetic    Genetics @relation(fields: [id_genetic], references: [id])

  id_location_init Int
  location         Locations @relation(fields: [id_location_init], references: [id])

  qtTotal       Int
  qtProp        Int
  qtPropTrashed Int @default(0)
  qtPlant       Int @default(0)

  descartes TrashedLotes[]
  plantas   Plantas[]

  @@map("lotes")
}

model Plantas {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())

  obs String?

  name String

  id_lote Int
  lote    Lotes @relation(fields: [id_lote], references: [id])

  id_propagationType Int
  propagationType    PropagationType @relation(fields: [id_propagationType], references: [id])

  id_genetic Int
  genetic    Genetics @relation(fields: [id_genetic], references: [id])

  id_location Int
  location    Locations @relation(fields: [id_location], references: [id])

  id_recipiente Int
  recipiente    Recipientes @relation(fields: [id_recipiente], references: [id])

  id_faseCultivo Int
  faseCultivo    FasesCultivo @relation(fields: [id_faseCultivo], references: [id])

  lastTransplant DateTime?

  propDate DateTime
  propName String

  aclimatationDate DateTime
  vegetationDate DateTime?
  vegetation2Date DateTime?
  vegetation3Date DateTime?
  floweringDate DateTime?

  //report purposes
  aclimatationLocation String?
  aclimatationRecipient String?

  vegetationLocation String?
  vegetationRecipient String?

  vegetation2Location String?
  vegetation2Recipient String?

  vegetation3Location String?
  vegetation3Recipient String?
  
  floweringLocation String?
  floweringRecipient String?


  cropDate DateTime?
  cropName String?

  trashDate      DateTime?
  id_trashReason Int?
  trashReason    TrashReasons? @relation(fields: [id_trashReason], references: [id])

  trashedLotes TrashedLotes[]

  @@map("plantas")
}

model TrashedLotes {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())

  obs String?

  id_lote Int?
  lote    Lotes? @relation(fields: [id_lote], references: [id])

  id_planta Int?
  planta    Plantas? @relation(fields: [id_planta], references: [id])

  id_trashReason Int
  trashReason    TrashReasons @relation(fields: [id_trashReason], references: [id])

  trashDate DateTime

  qtPropTrashed Int?
  massTrashed   Float? @default(0)

  qtPlantTrashed Int?

  @@map("trashedLotes")
}

model Clones {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())
  name           String

  total_clones Int

  @@map("clones")
}

