// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //provider = "sqlite"
  //url      = "file:./dev.db"
}

model Roles {
  id     Int     @id @default(autoincrement())
  name   String
  active Boolean @default(true)

  permissions Permissions[]

  users Users[] @relation(name: "user-role")

  @@map("roles")
}

model Permissions {
  id    Int     @id @default(autoincrement())
  code  String  @unique
  name  String
  roles Roles[]

  @@map("permissions")
}

model Company {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique

  @@map("company")
}

model Users {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())

  id_role Int?
  role    Roles? @relation(name: "user-role", fields: [id_role], references: [id])

  id_organization Int?
  organization    Organizations? @relation(name: "user-organization", fields: [id_organization], references: [id])

  name     String
  email    String @unique
  password String

  clones                  Clones[]
  profiles                Profiles[]
  fasesCultivo            FasesCultivo[]
  recipientes             Recipientes[]
  genetics                Genetics[]
  sections                Sections[]
  locations               Locations[]
  propagationType         PropagationType[]
  trashReasons            TrashReasons[]
  lotes                   Lotes[]
  trashedLotes            TrashedLotes[]
  plantas                 Plantas[]
  crops                   Crops[]
  organizations           Organizations?    @relation(name: "userCreate")
  actionTypes             ActionTypes[]
  actions                 Actions[]
  actionPlants            ActionPlants[]
  actionLotes             ActionLotes[]
  actionGroups            ActionGroups[]
  actionPlantsAtributions ActionPlants[]    @relation(name: "userAtribution")
  actionLotesAtributions  ActionLotes[]     @relation(name: "userAtributionActionLote")

  @@map("users")
}

model Organizations {
  id Int @id @default(autoincrement())

  userCreate     Users @relation(name: "userCreate", fields: [id_user_create], references: [id])
  id_user_create Int   @unique

  created_at DateTime @default(now())

  name        String @unique
  nick        String
  description String

  users Users[] @relation(name: "user-organization")

  @@map("organizations")
}

// PARAMS
model Profiles {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  id_user_create Int
  userCreate     Users @relation(fields: [id_user_create], references: [id])

  name        String
  description String

  genetics Genetics[]

  @@map("profiles")
}

model FasesCultivo {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String
  description String
  ordem       Int    @unique

  plantas         Plantas[]
  locations       Locations[]
  actionPlants    ActionPlants[]
  actionPlantsOld ActionPlants[] @relation("faseCultivoOld")

  @@map("fasesCultivo")
}

model Recipientes {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String
  description String

  plantas         Plantas[]
  actionPlants    ActionPlants[]
  actionPlantsOld ActionPlants[] @relation("recipienteOld")

  @@map("recipientes")
}

model Genetics {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String
  nick        String
  description String

  id_profile Int
  profile    Profiles @relation(fields: [id_profile], references: [id])

  plantas Plantas[]
  lotes   Lotes[]

  @@map("genetics")
}

model Sections {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String
  description String

  locations Locations[]

  @@map("section")
}

model Locations {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String
  description String

  id_section Int
  section    Sections @relation(fields: [id_section], references: [id])

  id_faseCultivo Int?
  faseCultivo    FasesCultivo? @relation(fields: [id_faseCultivo], references: [id])

  plantas         Plantas[]
  lotes           Lotes[]
  crops           Crops[]
  actionPlants    ActionPlants[]
  actionPlantsOld ActionPlants[] @relation("locationOld")
  actionLotesNew    ActionLotes[] @relation("actionLotesNewLocation")
  actionLotesOld    ActionLotes[] @relation("actionLotesOldLocation")

  @@map("location")
}

model PropagationType {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String @unique
  description String

  plantas Plantas[]
  lotes   Lotes[]

  @@map("propagationType")
}

model TrashReasons {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])

  name        String @unique
  description String

  trashedLotes TrashedLotes[]
  plantas      Plantas[]
  actionPlants ActionPlants[]

  @@map("trashReason")
}

model Lotes {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())

  name String @unique

  obs String

  propDate DateTime

  id_propagationType Int
  propagationType    PropagationType @relation(fields: [id_propagationType], references: [id])

  id_genetic Int
  genetic    Genetics @relation(fields: [id_genetic], references: [id])

  id_location_init Int
  location         Locations @relation(fields: [id_location_init], references: [id])

  id_mother     Int?
  motherPlant   Plantas? @relation("MotherPlantLote", fields: [id_mother], references: [id])
  qtTotal       Int
  qtProp        Int
  qtPropTrashed Int      @default(0)
  qtPlant       Int      @default(0)

  descartes           TrashedLotes[]
  selectedLotesAction ActionLotes[]  @relation("selectedLotesAction")
  plantas             Plantas[]

  @@map("lotes")
}

model Plantas {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())

  obs String?

  name String

  id_lote Int
  lote    Lotes @relation(fields: [id_lote], references: [id])

  id_propagationType Int
  propagationType    PropagationType @relation(fields: [id_propagationType], references: [id])

  id_genetic Int
  genetic    Genetics @relation(fields: [id_genetic], references: [id])

  id_location Int
  location    Locations @relation(fields: [id_location], references: [id])

  id_recipiente Int
  recipiente    Recipientes @relation(fields: [id_recipiente], references: [id])

  id_faseCultivo Int
  faseCultivo    FasesCultivo @relation(fields: [id_faseCultivo], references: [id])

  isMotherPlant Boolean? @default(false)
  isMalePlant   Boolean? @default(false)

  isTrashed Boolean? @default(false)
  isCropped Boolean? @default(false)

  id_mother   Int?
  motherPlant Plantas? @relation("MotherPlants", fields: [id_mother], references: [id])

  lotes  Lotes[]   @relation("MotherPlantLote")
  clones Plantas[] @relation("MotherPlants")

  lastTransplant DateTime?

  propDate DateTime
  propName String

  aclimatationDate DateTime
  vegetationDate   DateTime?
  vegetation2Date  DateTime?
  vegetation3Date  DateTime?
  floweringDate    DateTime?

  //report purposes
  aclimatationLocation  String?
  aclimatationRecipient String?

  vegetationLocation  String?
  vegetationRecipient String?

  vegetation2Location  String?
  vegetation2Recipient String?

  vegetation3Location  String?
  vegetation3Recipient String?

  floweringLocation  String?
  floweringRecipient String?

  cropDate DateTime?
  cropName String?
  id_crop  Int?
  crop     Crops?    @relation(fields: [id_crop], references: [id])

  trashDate      DateTime?
  id_trashReason Int?
  trashReason    TrashReasons? @relation(fields: [id_trashReason], references: [id])

  trashedLotes TrashedLotes[]
  actionPlants ActionPlants[]

  @@map("plantas")
}

model Crops {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())

  obs String?

  id_location Int
  location    Locations @relation(fields: [id_location], references: [id])

  name String

  isTrashed Boolean @default(false)
  isStored  Boolean @default(false)

  cropDate        DateTime
  dryingStartDate DateTime?
  dryingEndDate   DateTime?
  storageDate     DateTime?

  plantsQuantity Int?

  cropFullMass  Float?
  cropWetMass   Float?
  cropDriedMass Float?

  plantas Plantas[]
}

model TrashedLotes {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())

  obs String?

  id_lote Int?
  lote    Lotes? @relation(fields: [id_lote], references: [id])

  id_planta Int?
  planta    Plantas? @relation(fields: [id_planta], references: [id])

  id_trashReason Int
  trashReason    TrashReasons @relation(fields: [id_trashReason], references: [id])

  trashDate DateTime

  qtPropTrashed Int?
  massTrashed   Float? @default(0)

  qtPlantTrashed Int?

  actionLotes ActionLotes[]

  @@map("trashedLotes")
}

model Clones {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())
  name           String

  total_clones Int

  @@map("clones")
}

model ActionTypes {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())
  name           String
  description    String?

  actions Actions[]

  @@map("actionTypes")
}

model Actions {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())
  name           String
  description    String?

  isPlant Boolean @default(true)
  isLote  Boolean @default(true)
  isCrop  Boolean @default(false)

  id_actionType Int
  actionType    ActionTypes @relation(fields: [id_actionType], references: [id])

  actionPlants ActionPlants[]
  actionLotes  ActionLotes[]

  @@map("actions")
}

model ActionGroups {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())

  obs String?

  actionPlants ActionPlants[]
  actionLotes  ActionLotes[]
}

model ActionLotes {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())

  obs String?

  status String

  id_actionGroup Int
  actionGroup    ActionGroups @relation(fields: [id_actionGroup], references: [id])

  id_user_atribution Int?
  atribution         Users? @relation("userAtributionActionLote", fields: [id_user_atribution], references: [id])

  isCanceled      Boolean?
  cancelationDate DateTime?

  isCompleted    Boolean?
  completionDate DateTime?

  id_action Int
  action    Actions @relation(fields: [id_action], references: [id])

  id_lote Int
  lote    Lotes @relation("selectedLotesAction", fields: [id_lote], references: [id])

  id_location Int?
  location    Locations? @relation("actionLotesNewLocation",fields: [id_location], references: [id])

  id_location_old Int?
  location_old    Locations? @relation("actionLotesOldLocation", fields: [id_location_old], references: [id])
  
  id_trashedLote Int?
  trashedLote    TrashedLotes? @relation(fields: [id_trashedLote], references: [id])

}

model ActionPlants {
  id             Int      @id @default(autoincrement())
  id_user_create Int
  userCreate     Users    @relation(fields: [id_user_create], references: [id])
  created_at     DateTime @default(now())

  obs String?

  status String

  id_actionGroup Int
  actionGroup    ActionGroups @relation(fields: [id_actionGroup], references: [id])

  id_user_atribution Int?
  atribution         Users? @relation("userAtribution", fields: [id_user_atribution], references: [id])

  isCanceled      Boolean?
  cancelationDate DateTime?

  isCompleted    Boolean?
  completionDate DateTime?

  id_action Int
  action    Actions @relation(fields: [id_action], references: [id])

  id_planta Int
  planta    Plantas @relation(fields: [id_planta], references: [id])

  id_recipiente Int?
  recipiente    Recipientes? @relation(fields: [id_recipiente], references: [id])

  id_faseCultivo Int?
  faseCultivo    FasesCultivo? @relation(fields: [id_faseCultivo], references: [id])

  id_location Int?
  location    Locations? @relation(fields: [id_location], references: [id])

  id_trashReason Int?
  trashReason    TrashReasons? @relation(fields: [id_trashReason], references: [id])

  id_recipiente_old Int?
  recipienteOld     Recipientes? @relation("recipienteOld", fields: [id_recipiente_old], references: [id])

  id_faseCultivo_old Int?
  faseCultivoOld     FasesCultivo? @relation("faseCultivoOld", fields: [id_faseCultivo_old], references: [id])

  id_location_old Int?
  locationOld     Locations? @relation("locationOld", fields: [id_location_old], references: [id])

  @@map("actionPlants")
}
